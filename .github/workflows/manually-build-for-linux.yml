name: manually build uctags for linux

on:
  workflow_dispatch:
    inputs:
      target-arch:
        description: choose a target arch to be built for
        type: choice
        options:
          - x86_64
          - aarch64
          - ppc64le
          - riscv64
          - s390x

      enable-manpages:
        description: whether to generate manpages
        type: boolean
        default: false

      enable-json:
        description: whether to enable json support
        type: boolean
        default: true

      enable-yaml:
        description: whether to enable yaml support
        type: boolean
        default: true

      enable-xml:
        description: whether to enable xml support
        type: boolean
        default: true

      enable-libiconv:
        description: whether to enable libiconv support
        type: boolean
        default: true

      enable-seccomp:
        description: whether to enable seccomp support
        type: boolean
        default: false

      enable-threads:
        description: whether to enable threads support
        type: boolean
        default: true

      enable-largefile:
        description: whether to enable large file support
        type: boolean
        default: true

      regex-backend:
        description: choose a regex backend to be built with
        type: choice
        options:
          - none
          - gnu-regex
          - pcre2
        default: gnu-regex

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: create formula
        run: |
          unset DEP_PKG
          unset CONFIGURE_ARGS

          if [ '${{ github.event.inputs.enable-threads }}' = 'false' ] ; then
              CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-threads"
          else
              CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-threads"
          fi

          if [ '${{ github.event.inputs.enable-largefile }}' = 'false' ] ; then
              CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-largefile"
          else
              CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-largefile"
          fi

          if [ '${{ github.event.inputs.enable-json }}' = 'false' ] ; then
              CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-json"
          else
              CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-json"
              DEP_PKG="$DEP_PKG jansson"
          fi

          if [ '${{ github.event.inputs.enable-yaml }}' = 'false' ] ; then
              CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-yaml"
          else
              CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-yaml"
              DEP_PKG="$DEP_PKG libyaml"
          fi

          if [ '${{ github.event.inputs.enable-xml }}' = 'false' ] ; then
              CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-xml"
          else
              CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-xml"
              DEP_PKG="$DEP_PKG libxml2"
          fi

          if [ '${{ github.event.inputs.enable-libiconv }}' = 'false' ] ; then
              CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-iconv"
          else
              CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-iconv"
              DEP_PKG="$DEP_PKG libiconv"
          fi

          if [ '${{ github.event.inputs.enable-seccomp }}' = 'false' ] ; then
              CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-seccomp"
          else
              CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-seccomp"
              DEP_PKG="$DEP_PKG libseccomp"
          fi

          case ${{ github.event.inputs.regex-backend }} in
              none)
                CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-pcre2 --without-included-regex"
                ;;
              gnu-regex)
                CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-pcre2 --with-included-regex"
                ;;
              pcre2)
                CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-pcre2"
                DEP_PKG="$DEP_PKG pcre2"
                ;;
              *) echo "unexpected regex-backend: ${{ github.event.inputs.regex-backend }}"
          esac

          tee uctags.yml <<EOF
          summary: Maintained ctags implementation
          git-url: https://github.com/universal-ctags/ctags
          license: GPL-2.0-or-later
          dep-pkg: $DEP_PKG
          bsystem: autogen
          install: configure $CONFIGURE_ARGS
          EOF

      - name: create run.sh
        run: |
          cat > run.sh <<EOF
          set -e

          COLOR_GREEN='\033[0;32m'        # Green
          COLOR_PURPLE='\033[0;35m'       # Purple
          COLOR_OFF='\033[0m'             # Reset

          echo() {
              printf '%b\n' "\$*"
          }

          run() {
              echo "\${COLOR_PURPLE}==>\${COLOR_OFF} \${COLOR_GREEN}\$@\${COLOR_OFF}"
              eval "\$*"
          }

          run uname -a

          run apk update
          run apk add g++ libc-dev linux-headers

          if [ '${{ github.event.inputs.enable-manpages }}' = 'true' ] ; then
              run apk add python3 py3-pip
              run pip3 install -U docutils
          fi

          run wget https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
          run chmod a+x ppkg
          run ./ppkg setup
          run ./ppkg update
          run mv uctags.yml ~/.ppkg/repos.d/offical-core/formula/
          run ./ppkg install uctags --link-type=static-full --install-lib=static
          run ./ppkg pack    uctags -o .
          EOF

          chmod +x run.sh

      - name: execute run.sh in the docker container
        run: |
          case ${{ github.event.inputs.target-arch }} in
            x86_64)  IMAGE='alpine:3.18'    ;;
            aarch64) IMAGE='arm64v8/alpine' ;;
            ppc64le) IMAGE='ppc64le/alpine' ;;
            riscv64) IMAGE='riscv64/alpine:edge' ;;
            s390x)   IMAGE='s390x/alpine'   ;;
          esac

          if [ '${{ github.event.inputs.target-arch }}' != 'x86_64' ] ; then
            # https://github.com/multiarch/qemu-user-static
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          fi

          docker run -v $PWD:$PWD -w $PWD --name alpine "$IMAGE" sh run.sh

      - run: ls

      - uses: actions/upload-artifact@v3
        with:
          name: uctags---linux-${{ github.event.inputs.target-arch }}.tar.xz
          path: uctags-*-linux-${{ github.event.inputs.target-arch }}.tar.xz
